  // const [alternatives, setAlternatives] = useState(mockData);
  // const [questions, setQuestions] = useState([]);
  // const [resetInputs, setResetInputs] = useState(false);

  // useEffect(() => {
  //   const getQuestions = async function () {
  //     const user = JSON.parse(localStorage.getItem('user'));
  //     const jwt = user.token;

  //     fetch(`${config.baseURL}/getSurveysByType?type=${type}`, {
  //       headers: {
  //         'Content-Type': 'application/json',
  //         token: jwt,
  //       },
  //     })
  //       .then(response => response.json())
  //       .then(data => {
  //         const questionsFiltered = data.surveys.filter(survey => survey.topic.number === selectedTopic);
  //         setQuestions(questionsFiltered);
  //       });
  //   };
  //   getQuestions();
  // }, []);

  // const setQuestionToState = value => {
  //   setAlternatives(current => {
  //     return { ...current, question: value };
  //   });
  // };

  // const createSurvey = async () => {
  //   const user = JSON.parse(localStorage.getItem('user'));
  //   const jwt = user.token;
  //   const number = questions.length ? questions[questions.length - 1].number + 1 : 1;
  //   const payload = {
  //     ...alternatives,
  //     type,
  //     topic: selectedTopic,
  //     number,
  //   };

  //   const fetching = await fetch(`${config.baseURL}/createSurvey`, {
  //     method: 'POST',
  //     body: JSON.stringify(payload),
  //     headers: {
  //       'Content-Type': 'application/json',
  //       token: jwt,
  //     },
  //   });

  //   const response = await fetching.json();
  //   if (response.ok) {
  //     setQuestions([...questions, response.survey]);
  //     setResetInputs(true);
  //   } else {
  //     setResetInputs(true);
  //   }
  // };

  // const deleteSurvey = async surveyNumber => {
  //   const user = JSON.parse(localStorage.getItem('user'));
  //   const jwt = user.token;

  //   const fetching = await fetch(
  //     `${config.baseURL}/deleteSurvey?number=${surveyNumber}&type=${type}&topic=${selectedTopic}`,
  //     {
  //       method: 'DELETE',
  //       headers: {
  //         'Content-Type': 'application/json',
  //         token: jwt,
  //       },
  //     },
  //   );
  //   const response = await fetching.json();
  //   if (response.ok) {
  //     const questionDeleted = { ...response.survey };
  //     const filterQuestions = questions.filter(question => question.number !== questionDeleted.number);
  //     setQuestions(filterQuestions);
  //   }
  // };



<div>
        {/* {questions &&
          questions.map(question => {
            const alternatives = question.alternatives.map(item => {
              return <span>{item.description}</span>;
            });
            const optionLetter = question.alternatives.map(item => {
              return <span>{item.letter}.</span>;
            });
            return (
              <div style={{ marginTop: 10 }} key={question.number} className="edit-question-container">
                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    paddingLeft: 20,
                    paddingRight: 20,
                    paddingTop: 10,
                  }}
                >
                  <span
                    style={{
                      fontWeight: 'bold',
                      color: 'var(--color-primary)',
                    }}
                  >
                    Pregunta: {question.question}
                  </span>
                  <span
                    onClick={() => deleteSurvey(question.number)}
                    style={{
                      cursor: 'pointer',
                      color: 'var(--color-secondary)',
                      fontWeight: 'bold',
                      border: '1px solid var(--color-secondary)',
                      borderRadius: 25,
                      padding: '0px 20px',
                    }}
                  >
                    X
                  </span>
                </div>
                <div
                  style={{
                    display: 'flex',
                    gap: 5,
                    marginTop: 10,
                    paddingLeft: 20,
                  }}
                >
                  <div
                    style={{
                      display: 'flex',
                      flexDirection: 'column',
                      gap: 10,
                    }}
                  >
                    {optionLetter}
                  </div>
                  <div
                    style={{
                      display: 'flex',
                      flexDirection: 'column',
                      gap: 10,
                    }}
                  >
                    {alternatives}
                  </div>
                </div>
              </div>
            );
          })} */}
      </div>
